package com.formacionbdi.springboot.app.zuul.oauth;

import java.util.Arrays;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.Ordered;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;
import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;
import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

@RefreshScope //Acutaliza el alcanza en tiempo de ejecución
@Configuration
@EnableResourceServer //Lo habilitamos como un servidor de recursos.
public class ResourceServerConfig extends ResourceServerConfigurerAdapter{
	
	@Value("${config.security.oauth.jwt.key}") //Inyectamos los datos del la llave ubicada en server config a la variable.
	private String jwtKey;
	
	@Override
	public void configure(ResourceServerSecurityConfigurer resources) throws Exception {//Configura el servidor de recursos. Guarda el token generado en los recursos del servidor
		//a los que se tendra acceso.
		resources.tokenStore(tokenStore());
	}
  
	@Override
	public void configure(HttpSecurity http) throws Exception { //Aqui se configura las rutas de acceso de los usuarios mediante http a los recursos
		http.authorizeRequests().antMatchers("/api/security/oauth/**").permitAll()//Autoriza a todo el mundo aunque no tengo ningun rol.
		.antMatchers(HttpMethod.GET, "/api/productos/listar", "/api/items/listar", "/api/usuarios/usuarios").permitAll()
		.antMatchers(HttpMethod.GET, "/api/productos/ver/{id}", 
				"/api/items/ver/{id}/cantidad/{cantidad}", 
				"/api/usuarios/usuarios/{id}").hasAnyRole("ADMIN", "USER")//Permite listar productos, items e usuarios incluso por id a los quien posee el rol usuario o admin.
		.antMatchers("/api/productos/**", "/api/items/**", "/api/usuarios/**").hasRole("ADMIN")//Autoriza cualquier accion disponible en usuarios, item o usuarios a quien posee el rol admin.
		.anyRequest().authenticated()//cualquier ruta no indicada, es de acceso publico si se a validado el usuario.
		.and().cors().configurationSource(corsConfigurationSource());
	}

	@Bean
	public CorsConfigurationSource corsConfigurationSource() {//Cors da acceso a servicios ubicados en otro servidor(normalmente el frontend) al servidor de recursos, en nuestro caso zuul.
		CorsConfiguration corsConfig=new CorsConfiguration();
		corsConfig.setAllowedOrigins(Arrays.asList("*"));//Añade de forma automatica a cors cualquier origen.
		corsConfig.setAllowedMethods(Arrays.asList("POST", "GET", "PUT", "DELETE", "OPTION"));//permite todas las acciones indicadas(independientemente de los permisos autorizados por oauth2).
		corsConfig.setAllowCredentials(true);
		corsConfig.setAllowedHeaders(Arrays.asList("Authoritation", "Content-Type"));//
		
		UrlBasedCorsConfigurationSource source=new UrlBasedCorsConfigurationSource();
		source.registerCorsConfiguration("/**", corsConfig);//Registramos la configuracion aplicando a todas las rutas con /**
		
		return source;
	}
	
	@Bean
	public FilterRegistrationBean<CorsFilter> corsFilter(){
		FilterRegistrationBean<CorsFilter> bean = new FilterRegistrationBean<CorsFilter>(new CorsFilter(corsConfigurationSource()));
		bean.setOrder(Ordered.HIGHEST_PRECEDENCE);
		return bean;
	}

	@Bean
	public JwtTokenStore tokenStore() {
		
		return new JwtTokenStore(accessTokenConverter());
	}

	@Bean
	public JwtAccessTokenConverter accessTokenConverter() {
		JwtAccessTokenConverter tokenConverter = new JwtAccessTokenConverter();
		tokenConverter.setSigningKey("jwtKey");
		
		return tokenConverter;
	}
	
	
}
